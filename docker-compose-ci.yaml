version: '3.8'

services:

  frontend:
    image: sermalenk/skypro-front:lesson-36
    restart: always
    depends_on:
      - api
    ports:
      - "80:80"

  api:
    image: mixola/todolist_app:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    restart: always
    environment:
      DEBUG: ${DEBUG}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    ports:
      - '8000:8000'
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"

  migrations:
    image: mixola/todolist_app:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      DEBUG: ${DEBUG}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
    command: sh -c "python manage.py makemigrations &&
        python manage.py migrate"

  db:
    image: postgres:14.6-alpine
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 3s
      timeout: 3s
      retries: 3

volumes:
    pg_data:
